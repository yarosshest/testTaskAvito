// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeSegments holds the string denoting the segments edge name in mutations.
	EdgeSegments = "segments"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SegmentsTable is the table that holds the segments relation/edge. The primary key declared below.
	SegmentsTable = "user_segments"
	// SegmentsInverseTable is the table name for the Segment entity.
	// It exists in this package in order to avoid circular dependency with the "segment" package.
	SegmentsInverseTable = "segments"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
}

var (
	// SegmentsPrimaryKey and SegmentsColumn2 are the table columns denoting the
	// primary key for the segments relation (M2M).
	SegmentsPrimaryKey = []string{"user_id", "segment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySegmentsCount orders the results by segments count.
func BySegmentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSegmentsStep(), opts...)
	}
}

// BySegments orders the results by segments terms.
func BySegments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSegmentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSegmentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SegmentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, SegmentsTable, SegmentsPrimaryKey...),
	)
}
