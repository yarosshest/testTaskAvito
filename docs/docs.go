// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/Segment": {
            "post": {
                "description": "Add segment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add segment",
                "operationId": "add-segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "segment name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "409": {
                        "description": "segment with this name alredy exist"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            },
            "delete": {
                "description": "Delete segment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete segment",
                "operationId": "del-segment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "segment name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "404": {
                        "description": "segment with this name not found"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            }
        },
        "/User": {
            "get": {
                "description": "Get user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get user",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "segments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "404": {
                        "description": "user with this id not found"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            },
            "put": {
                "description": "Update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update user",
                "operationId": "put-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "user id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Segments to add and del",
                        "name": "add",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.QueueUpdateUser"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "ok"
                    },
                    "400": {
                        "description": "bad request"
                    },
                    "404": {
                        "description": "user with this id not found"
                    },
                    "500": {
                        "description": "internal server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "db.QueueUpdateUser": {
            "type": "object",
            "properties": {
                "add": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dell": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "test task avito API",
	Description:      "This is a test task avito server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
